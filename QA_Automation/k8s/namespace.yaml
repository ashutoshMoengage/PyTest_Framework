# 🚀 Kubernetes Namespace for API Testing Framework
# ===================================================
#
# 📚 FOR BEGINNERS:
# A Namespace in Kubernetes is like a "folder" that organizes your applications.
# It provides isolation between different projects or environments.
#
# 🎯 WHY USE NAMESPACES?
# ✅ ORGANIZATION: Keep test framework separate from other apps
# ✅ ISOLATION: Resources don't interfere with each other
# ✅ SECURITY: Apply different access controls per namespace
# ✅ RESOURCE LIMITS: Set CPU/memory limits per namespace
#
# 🌟 REAL-WORLD USAGE:
# - api-testing-dev: Development environment
# - api-testing-staging: Staging environment  
# - api-testing-prod: Production environment

apiVersion: v1
kind: Namespace
metadata:
  name: api-testing
  labels:
    name: api-testing
    environment: production
    team: qa-automation
    version: "2.0.0"
    description: "Advanced API Testing Framework"
  annotations:
    # 📝 Documentation and contact info
    description: "Namespace for API testing framework with PyTest"
    contact: "qa-team@company.com"
    documentation: "https://github.com/yourcompany/pytest-framework"
    
    # 🔧 Operational annotations
    managed-by: "qa-automation-team"
    created-date: "2024-01-15"
    last-updated: "2024-01-15"
    
    # 🎯 Business context
    cost-center: "engineering"
    project: "api-testing-framework"
    
    # 🔒 Security annotations
    security-scan: "enabled"
    compliance: "required"

---
# 📊 Resource Quota - Limits for the namespace
# This prevents the testing framework from using too many cluster resources
apiVersion: v1
kind: ResourceQuota
metadata:
  name: api-testing-quota
  namespace: api-testing
  labels:
    component: resource-management
spec:
  hard:
    # 🖥️ Compute Resources
    requests.cpu: "4"        # Total CPU requests: 4 cores
    requests.memory: 8Gi     # Total memory requests: 8GB
    limits.cpu: "8"          # Total CPU limits: 8 cores  
    limits.memory: 16Gi      # Total memory limits: 16GB
    
    # 📦 Storage Resources
    requests.storage: 50Gi   # Total persistent volume claims: 50GB
    
    # 🎯 Object Counts
    pods: "20"               # Maximum 20 pods
    services: "10"           # Maximum 10 services
    configmaps: "20"         # Maximum 20 config maps
    secrets: "10"            # Maximum 10 secrets
    persistentvolumeclaims: "5"  # Maximum 5 PVCs
    
    # 🌐 Networking
    services.loadbalancers: "2"   # Maximum 2 load balancers
    services.nodeports: "5"       # Maximum 5 node ports

---
# 🔧 Limit Range - Default limits for pods in this namespace
# This sets default CPU/memory limits for containers that don't specify them
apiVersion: v1
kind: LimitRange
metadata:
  name: api-testing-limits
  namespace: api-testing
  labels:
    component: resource-management
spec:
  limits:
  # 📦 Container limits
  - type: Container
    default:
      # Default limits (if not specified)
      cpu: "1"
      memory: 1Gi
    defaultRequest:
      # Default requests (if not specified)
      cpu: "200m"      # 0.2 CPU cores
      memory: 256Mi    # 256MB RAM
    max:
      # Maximum allowed
      cpu: "4"
      memory: 4Gi
    min:
      # Minimum required
      cpu: "50m"       # 0.05 CPU cores  
      memory: 64Mi     # 64MB RAM
  
  # 🎯 Pod limits
  - type: Pod
    max:
      cpu: "6"
      memory: 8Gi
  
  # 💾 Persistent Volume Claims
  - type: PersistentVolumeClaim
    max:
      storage: 10Gi
    min:
      storage: 1Gi

---
# 🌐 Network Policy - Control traffic to/from the namespace
# This defines which pods can communicate with each other
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-testing-network-policy
  namespace: api-testing
  labels:
    component: security
spec:
  podSelector: {}  # Apply to all pods in namespace
  policyTypes:
  - Ingress
  - Egress
  
  # 📥 Incoming traffic rules
  ingress:
  # Allow traffic from same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: api-testing
  
  # Allow traffic from monitoring namespace (for Prometheus)
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Metrics port
  
  # Allow traffic from ingress controllers
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080  # Web dashboard port
  
  # 📤 Outgoing traffic rules  
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS to external APIs (for testing)
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Allow HTTP to external APIs (for testing)
  - to: []
    ports:
    - protocol: TCP
      port: 80
  
  # Allow traffic within same namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: api-testing
  
  # Allow traffic to databases (if needed)
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP  
      port: 6379  # Redis

# ========================================
# USAGE EXAMPLES FOR BEGINNERS:
# ========================================

# 🏗️ CREATE THE NAMESPACE:
# kubectl apply -f k8s/namespace.yaml

# 🔍 VIEW THE NAMESPACE:
# kubectl get namespace api-testing
# kubectl describe namespace api-testing

# 📊 CHECK RESOURCE USAGE:
# kubectl get resourcequota -n api-testing
# kubectl describe resourcequota api-testing-quota -n api-testing

# 🔧 CHECK LIMIT RANGES:
# kubectl get limitrange -n api-testing
# kubectl describe limitrange api-testing-limits -n api-testing

# 🌐 VIEW NETWORK POLICIES:
# kubectl get networkpolicy -n api-testing
# kubectl describe networkpolicy api-testing-network-policy -n api-testing

# 🎯 SWITCH TO THE NAMESPACE:
# kubectl config set-context --current --namespace=api-testing

# 📋 LIST ALL RESOURCES IN NAMESPACE:
# kubectl get all -n api-testing

# 🗑️ DELETE THE NAMESPACE (BE CAREFUL!):
# kubectl delete namespace api-testing

# ========================================
# REAL-WORLD ENVIRONMENTS:
# ========================================

# 🏢 ENTERPRISE SETUP:
# You might have multiple namespaces:
# - api-testing-dev      (Development)
# - api-testing-staging  (Staging) 
# - api-testing-prod     (Production)
# - api-testing-perf     (Performance Testing)

# 🔄 CREATE MULTIPLE ENVIRONMENTS:
# 
# For Development:
# kubectl create namespace api-testing-dev
# kubectl label namespace api-testing-dev environment=development
# 
# For Staging:
# kubectl create namespace api-testing-staging  
# kubectl label namespace api-testing-staging environment=staging
#
# For Production:
# kubectl create namespace api-testing-prod
# kubectl label namespace api-testing-prod environment=production

# 🎯 BENEFITS:
# ✅ ISOLATION: Tests in dev won't affect production
# ✅ SECURITY: Different access controls per environment
# ✅ RESOURCE LIMITS: Prevent tests from consuming all cluster resources
# ✅ ORGANIZATION: Easy to find and manage testing resources
# ✅ MONITORING: Track resource usage per environment
# ✅ COST TRACKING: See costs per environment/team 