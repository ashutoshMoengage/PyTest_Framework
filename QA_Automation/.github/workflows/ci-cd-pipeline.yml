# 🚀 Advanced PyTest API Testing Framework - CI/CD Pipeline
# ==========================================================
#
# 📚 FOR BEGINNERS:
# This GitHub Actions workflow automatically runs your tests whenever you push code.
# It includes advanced features like:
# - Multiple Python versions testing
# - Parallel test execution
# - Advanced reporting (HTML, Allure, Coverage)
# - Slack/Email notifications
# - Deployment to test environments
#
# 🎯 CUSTOMIZATION:
# 1. Update secrets in GitHub Settings > Secrets and variables > Actions:
#    - SLACK_WEBHOOK_URL (for notifications)
#    - API_KEYS (for your specific APIs)
#    - DEPLOYMENT_TOKENS (for staging/prod deployments)
# 2. Modify the matrix strategy for your Python versions
# 3. Update notification channels
# 4. Add your specific deployment steps

name: 🧪 API Testing Framework CI/CD

# 🔄 TRIGGER CONDITIONS: When to run this pipeline
on:
  # Run on every push to main branches
  push:
    branches: [ main, develop, master ]
  
  # Run on every pull request
  pull_request:
    branches: [ main, develop, master ]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - development
      
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - smoke
        - regression
        - performance
  
  # Run scheduled tests (every day at 6 AM UTC)
  schedule:
    - cron: '0 6 * * *'

# 🌍 ENVIRONMENT VARIABLES: Available to all jobs
env:
  PYTHON_VERSION_DEFAULT: '3.11'
  PYTEST_WORKERS: 'auto'
  ALLURE_VERSION: '2.24.0'

# 🏗️ JOBS: Different stages of the pipeline
jobs:
  
  # 🔍 STATIC ANALYSIS: Code quality checks
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit safety mypy
    
    - name: 🎨 Code Formatting Check (Black)
      run: |
        echo "🎨 Checking code formatting with Black..."
        black --check --diff .
    
    - name: 📝 Import Sorting Check (isort)
      run: |
        echo "📝 Checking import sorting..."
        isort --check-only --diff .
    
    - name: 🔍 Linting (Flake8)
      run: |
        echo "🔍 Running Flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🔒 Security Check (Bandit)
      run: |
        echo "🔒 Running security analysis..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
    
    - name: 🛡️ Dependency Security Check
      run: |
        echo "🛡️ Checking for vulnerable dependencies..."
        safety check --json --output safety-report.json || true
        safety check
    
    - name: 📊 Type Checking (MyPy)
      run: |
        echo "📊 Running type checking..."
        mypy . --ignore-missing-imports --no-strict-optional || true
    
    - name: 📈 Upload Code Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: |
          bandit-report.json
          safety-report.json
  
  # 🧪 SMOKE TESTS: Quick validation tests
  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 📁 Create Required Directories
      run: |
        mkdir -p logs reports/allure-results
    
    - name: 💨 Run Smoke Tests
      run: |
        echo "💨 Running smoke tests on Python ${{ matrix.python-version }}..."
        pytest -m smoke \
          --html=reports/smoke-report-py${{ matrix.python-version }}.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/smoke-results-py${{ matrix.python-version }}.json \
          --alluredir=reports/allure-results \
          --tb=short \
          -v
    
    - name: 📈 Upload Smoke Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: smoke-test-reports-py${{ matrix.python-version }}
        path: |
          reports/
          logs/
  
  # 🔄 REGRESSION TESTS: Full test suite
  regression-tests:
    name: 🔄 Regression Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        test-group: ['users', 'posts', 'auth']
        environment: ['staging']  # Add 'production' when ready
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔧 Setup Test Environment
      run: |
        mkdir -p logs reports/allure-results
        echo "Setting up test environment: ${{ matrix.environment }}"
        export ENVIRONMENT=${{ matrix.environment }}
    
    - name: 🔄 Run Regression Tests
      env:
        ENVIRONMENT: ${{ matrix.environment }}
        # Add your API keys here as secrets
        # API_KEY: ${{ secrets.API_KEY }}
        # AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
      run: |
        echo "🔄 Running regression tests for ${{ matrix.test-group }}..."
        pytest tests/api/test_${{ matrix.test-group }}.py \
          -m regression \
          --html=reports/regression-${{ matrix.test-group }}-${{ matrix.environment }}.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/regression-${{ matrix.test-group }}-${{ matrix.environment }}.json \
          --alluredir=reports/allure-results \
          --cov=utils \
          --cov-report=html:reports/coverage-${{ matrix.test-group }} \
          --cov-report=xml:reports/coverage-${{ matrix.test-group }}.xml \
          --tb=short \
          -v \
          -n ${{ env.PYTEST_WORKERS }}
    
    - name: 📊 Generate Coverage Report
      run: |
        echo "📊 Coverage Summary for ${{ matrix.test-group }}:"
        python -m coverage report --show-missing || true
    
    - name: 📈 Upload Regression Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-reports-${{ matrix.test-group }}-${{ matrix.environment }}
        path: |
          reports/
          logs/
  
  # ⚡ PERFORMANCE TESTS: Load and performance testing
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name == 'push' && contains(github.ref, 'main')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Running performance tests..."
        pytest -m performance \
          --html=reports/performance-report.html \
          --self-contained-html \
          --json-report \
          --json-report-file=reports/performance-results.json \
          --tb=short \
          -v
    
    - name: 📊 Performance Analysis
      run: |
        echo "📊 Analyzing performance results..."
        python -c "
        import json
        with open('reports/performance-results.json', 'r') as f:
            data = json.load(f)
        
        print('Performance Test Summary:')
        print(f'Total Tests: {data.get(\"summary\", {}).get(\"total\", 0)}')
        print(f'Passed: {data.get(\"summary\", {}).get(\"passed\", 0)}')
        print(f'Failed: {data.get(\"summary\", {}).get(\"failed\", 0)}')
        
        # Add performance threshold checks here
        "
    
    - name: 📈 Upload Performance Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-reports
        path: |
          reports/
          logs/
  
  # 📊 ALLURE REPORT: Generate beautiful test reports
  generate-allure-report:
    name: 📊 Generate Allure Report
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests]
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 📥 Download All Test Results
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: 🔧 Setup Allure
      run: |
        echo "🔧 Setting up Allure reporting..."
        wget -q https://github.com/allure-framework/allure2/releases/download/${{ env.ALLURE_VERSION }}/allure-${{ env.ALLURE_VERSION }}.tgz
        tar -xzf allure-${{ env.ALLURE_VERSION }}.tgz
        sudo mv allure-${{ env.ALLURE_VERSION }} /opt/allure
        sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure
        allure --version
    
    - name: 📊 Combine Allure Results
      run: |
        echo "📊 Combining Allure results..."
        mkdir -p combined-allure-results
        find artifacts/ -name "allure-results" -type d -exec cp -r {}/* combined-allure-results/ \; || true
        ls -la combined-allure-results/
    
    - name: 🎨 Generate Allure Report
      run: |
        echo "🎨 Generating Allure report..."
        allure generate combined-allure-results --clean -o allure-report
        
        # Add environment info to the report
        echo '{
          "Environment": "'${GITHUB_REF_NAME:-unknown}'",
          "Build": "'${GITHUB_RUN_NUMBER:-0}'",
          "Commit": "'${GITHUB_SHA:0:8}'",
          "Author": "'${GITHUB_ACTOR:-unknown}'",
          "Timestamp": "'$(date -u +"%Y-%m-%d %H:%M:%S UTC")'"
        }' > allure-report/environment.json
    
    - name: 📤 Deploy Allure Report to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./allure-report
        destination_dir: allure-report
    
    - name: 📈 Upload Allure Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: allure-report
        path: allure-report/
  
  # 📧 NOTIFICATIONS: Send results to team
  notifications:
    name: 📧 Send Notifications
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, performance-tests]
    if: always()
    
    steps:
    - name: 📊 Determine Overall Status
      id: status
      run: |
        # Determine overall pipeline status
        if [[ "${{ needs.smoke-tests.result }}" == "success" && \
              "${{ needs.regression-tests.result }}" == "success" && \
              ("${{ needs.performance-tests.result }}" == "success" || "${{ needs.performance-tests.result }}" == "skipped") ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
          echo "color=good" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
          echo "color=danger" >> $GITHUB_OUTPUT
        fi
    
    - name: 📧 Slack Notification
      uses: 8398a7/action-slack@v3
      if: always() && env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with:
        status: ${{ steps.status.outputs.status }}
        channel: '#qa-automation'
        username: 'GitHub Actions'
        icon_emoji: ':robot_face:'
        color: ${{ steps.status.outputs.color }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          ${{ steps.status.outputs.emoji }} **API Testing Framework - ${{ steps.status.outputs.status }}**
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.event.head_commit.message }}
          **Author:** ${{ github.actor }}
          **Workflow:** ${{ github.workflow }}
          
          **Test Results:**
          • Smoke Tests: ${{ needs.smoke-tests.result }}
          • Regression Tests: ${{ needs.regression-tests.result }}
          • Performance Tests: ${{ needs.performance-tests.result }}
          
          [View Full Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
    
    - name: 📝 Create Issue on Failure
      if: steps.status.outputs.status == 'failure' && github.event_name == 'push'
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🚨 API Tests Failed - Build #${{ github.run_number }}`;
          const body = `
          ## Test Failure Report
          
          **Build:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Author:** ${{ github.actor }}
          
          ### Test Results:
          - **Smoke Tests:** ${{ needs.smoke-tests.result }}
          - **Regression Tests:** ${{ needs.regression-tests.result }}
          - **Performance Tests:** ${{ needs.performance-tests.result }}
          
          ### Actions Required:
          - [ ] Review test failures
          - [ ] Fix identified issues
          - [ ] Re-run tests
          - [ ] Update documentation if needed
          
          ### Links:
          - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-report/)
          
          **Auto-generated by GitHub Actions**
          `;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'ci-failure'
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('API Tests Failed') && 
            issue.title.includes('Build #')
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['ci-failure', 'bug', 'testing']
            });
          }

# 🎯 BEGINNER'S CUSTOMIZATION GUIDE:
# =====================================
#
# 1. 🔐 SECRETS SETUP:
#    Go to GitHub Settings > Secrets and variables > Actions
#    Add these secrets:
#    - SLACK_WEBHOOK_URL: Your Slack webhook for notifications
#    - API_KEY: Your API keys for testing
#    - AUTH_TOKEN: Authentication tokens
#
# 2. 📧 NOTIFICATION CHANNELS:
#    Update the Slack channel name in the notification step
#    Add email notifications if needed
#
# 3. 🐍 PYTHON VERSIONS:
#    Modify the matrix strategy to test your required Python versions
#
# 4. 🌍 ENVIRONMENTS:
#    Add your staging/production environment configurations
#
# 5. 📊 REPORTING:
#    The pipeline generates multiple report types:
#    - HTML reports (for each test run)
#    - JSON reports (for programmatic analysis)
#    - Allure reports (beautiful interactive reports)
#    - Coverage reports (code coverage analysis)
#
# 6. ⚡ PERFORMANCE:
#    Adjust the parallel execution (-n auto) based on your needs
#    Add performance thresholds in the performance analysis step
#
# 7. 🚀 DEPLOYMENT:
#    Add deployment steps after successful tests
#    Include environment-specific configurations
#
# 📚 LEARN MORE:
# - GitHub Actions Documentation: https://docs.github.com/en/actions
# - PyTest Documentation: https://pytest.org/
# - Allure Reporting: https://docs.qameta.io/allure/ 